info:
  title: ABCall
  description: ''
  version: 1.0.0
tags:
  - name: testing
basePath: /api
paths:
  /v1/health/client:
    get:
      summary: Health check
      deprecated: false
      description: >-
        This endpoint allows to check the health and availability of the
        ClientService API endpoints. It returns a status code indicating the
        health of the API.
      operationId: healthClient
      tags: []
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
          schema:
            type: object
            properties:
              status:
                type: string
                description: Status
            required:
              - status
      security: []
      produces:
        - application/json
      x-google-backend:
        address: "${client_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS
  /v1/auth/employee:
    post:
      summary: Authenticate employee
      deprecated: false
      description: >-
        Authenticates an employee (administrator, analyst, or agent) and
        generates a JWT authentication token for subsequent API requests.


        - If the user is not found or the password is wrong, the API returns a
        401 Unauthorized error.

        - If the request is not valid JSON or is missing required fields, a 400
        Bad Request error is returned.
      operationId: authEmployee
      tags: []
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              username:
                type: string
                description: The employee's username.
              password:
                type: string
                description: The employee's password.
            required:
              - username
              - password
      responses:
        '200':
          description: ''
          headers: {}
          schema:
            type: object
            properties:
              token:
                type: string
            required:
              - token
        '400':
          description: ''
          headers: {}
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: ''
          headers: {}
          schema:
            $ref: '#/definitions/Error'
      security: []
      consumes:
        - application/json
      produces:
        - application/json
      x-google-backend:
        address: "${client_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS

  /v1/auth/employee/refresh:
    post:
      summary: Refresh token
      deprecated: false
      description: ''
      operationId: employeeTokenRefresh
      tags: []
      parameters: []
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              token:
                type: string
            required:
              - token
      security:
        - tokenAdmin: []
        - tokenUnassignedAdmin: []
        - tokenAgent: []
        - tokenUnassignedAgent: []
        - tokenAnalyst: []
        - tokenUnassignedAnalyst: []
      produces:
        - application/json
      x-google-backend:
        address: "${client_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS

  /v1/employees:
    post:
      summary: Create employee
      deprecated: false
      description: >-
        Creates a new employee without associating it with a specific client
        initially. Employees can be administrators, analysts, or agents. 

        - If the email address is already registered, the API returns a 409 Conflict error.
        - If the request is not valid JSON or does not meet the field requirements, a 400 Bad Request error is returned.
      operationId: employeeCreate
      tags: [ ]
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              name:
                type: string
                description: Name of the employee.
              email:
                type: string
                description: Email of the employee.
              password:
                type: string
                description: Password for the employee.
              role:
                type: string
                enum:
                  - admin
                  - analyst
                  - agent
                description: Role of the employee.
            required:
              - name
              - email
              - password
              - role
      responses:
        '201':
          description: Employee created successfully
          headers: { }
          schema:
            type: object
            properties:
              id:
                type: string
                description: ID of the employee
              clientId:
                type: string
                description: ID of the associated client (can be null)
              name:
                type: string
                description: Name of the employee
              email:
                type: string
                description: Email of the employee
              role:
                type: string
                description: Role of the employee
            required:
              - id
              - name
              - email
              - role
        '400':
          description: Bad request. The request body is invalid or missing required fields.
          headers: { }
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Conflict. The email address is already registered.
          headers: { }
          schema:
            $ref: '#/definitions/Error'
      security: [ ]
      consumes:
        - application/json
      produces:
        - application/json
      x-google-backend:
        address: "${client_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS
    get:
      summary: List employees
      deprecated: false
      description: >
        Returns the paginated list of employees from a specific Client.

        - If a successful request is made, a code 200 OK is returned.

        - The only page_size numbers allowed are 5, 10, and 20. If a different number is sent, a code 400 BAD REQUEST is returned.

        - If a page_number less than 1 is sent, a code 400 BAD REQUEST is returned.

        - If a user with a role other than Administrator sends the request, a code 403 FORBIDDEN is returned.

        - If the request is sent without the authorization token, a code 401 UNAUTHORIZED is returned.
      operationId: listEmployees
      tags: [ ]
      parameters:
        - name: page_size
          in: query
          description: Number of employees per page (Allowed values are 5, 10, 20).
          required: false
          type: integer
          default: 5
          x-example: 10
        - name: page_number
          in: query
          description: The page number to retrieve (starting at 1).
          required: false
          type: integer
          default: 1
          x-example: 2
      responses:
        '200':
          description: Employees list retrieved successfully
          headers: { }
          schema:
            type: object
            properties:
              employees:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: ID of the employee
                    clientId:
                      type: string
                      description: ID of the associated client
                    name:
                      type: string
                      description: Name of the employee
                    email:
                      type: string
                      description: Email of the employee
                    role:
                      type: string
                      description: Role of the employee
                    invitationStatus:
                      type: string
                      description: Invitation status of the employee
                    invitationDate:
                      type: string
                      format: date-time
                      description: Date of the invitation
                  required:
                    - id
                    - clientId
                    - name
                    - email
                    - role
                    - invitationStatus
                    - invitationDate
              totalPages:
                type: integer
                description: Total number of pages
              currentPage:
                type: integer
                description: Current page number
            required:
              - employees
              - totalPages
              - currentPage
        '400':
          description: Bad request. Invalid page_size or page_number.
          headers: { }
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. Missing or invalid token.
          headers: { }
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. User does not have access to this resource.
          headers: { }
          schema:
            $ref: '#/definitions/Error'
      security:
        - tokenAdmin: [ ]
      produces:
        - application/json
      x-google-backend:
        address: "${client_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS

  /v1/clients:
    get:
      summary: List clients
      deprecated: false
      description: Returns the list of clients (companies)
      operationId: listClients
      tags: []
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: ID of the client
                name:
                  type: string
                  description: Name of the client
              required:
                - id
                - name
      security: []
      produces:
        - application/json
      x-google-backend:
        address: "${client_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS
    post:
      summary: Create client
      deprecated: false
      description: ''
      operationId: clientCreate
      tags: []
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              name:
                type: string
                description: Name of the client
              prefixEmailIncidents:
                type: string
                description: Prefix for the email to report incidents
            required:
              - name
              - prefixEmailIncidents
      responses:
        '201':
          description: Created
          schema:
            type: object
            properties:
              id:
                type: string
                description: ID of the client
              name:
                type: string
                description: Name of the client
              emailIncidents:
                type: string
                description: Email of the client where customers can report incidents
              plan:
                type: string
                description: Plan of the client
                x-nullable: true
            required:
              - id
              - name
              - emailIncidents
              - plan
      security:
        - tokenUnassignedAdmin: []
      consumes:
        - application/json
      produces:
        - application/json
      x-google-backend:
        address: "${client_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS

  /v1/clients/{clientId}:
    get:
      summary: Get client
      deprecated: false
      description: Returns information about a client (company)
      operationId: getClient
      tags: []
      parameters:
        - name: clientId
          in: path
          description: ID of the client to retrieve
          required: true
          type: string
          x-example: f0d2e958-f503-462e-b0f1-911c23b2e008
      responses:
        '200':
          description: ''
          headers: {}
          schema:
            type: object
            properties:
              id:
                type: string
                description: ID of the client
              name:
                type: string
                description: Name of the client
            required:
              - id
              - name
        '400':
          description: ''
          headers: {}
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: ''
          headers: {}
          schema:
            $ref: '#/definitions/Error'
      security: []
      produces:
        - application/json
      x-google-backend:
        address: "${client_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS
  /v1/clients/me:
    get:
      summary: Info client
      deprecated: false
      description: >-
        Returns information about the client (company) of the user making the
        request.
      operationId: infoClient
      tags: []
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
          schema:
            type: object
            properties:
              id:
                type: string
                description: ID of the client
              name:
                type: string
                description: Name of the client
              plan:
                type: string
                description: Plan of the client (only for admins)
              emailIncidents:
                type: string
                description: Email of the client where customers can report incidents
            required:
              - id
              - name
              - emailIncidents
        '401':
          description: ''
          headers: {}
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: ''
          headers: {}
          schema:
            $ref: '#/definitions/Error'
      security:
        - tokenAdmin: []
        - tokenUnassignedAdmin: []
        - tokenAgent: []
        - tokenAnalyst: []
        - tokenUser: []
      produces:
        - application/json
      x-google-backend:
        address: "${client_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS

  /v1/clients/me/plan/{plan}:
    post:
      summary: Select plan
      deprecated: false
      description: ''
      operationId: selectPlan
      tags: []
      parameters:
        - name: plan
          in: path
          description: New plan (emprendedor, empresario, empresario_plus)
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              id:
                type: string
                description: ID of the client
              name:
                type: string
                description: Name of the client
              plan:
                type: string
                description: Plan of the client
              emailIncidents:
                type: string
                description: Email of the client where customers can report incidents
            required:
              - id
              - name
              - plan
              - emailIncidents
      security:
        - tokenAdmin: []
      produces:
        - application/json
      x-google-backend:
        address: "${client_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS

  /v1/reset/client:
    post:
      summary: Reset database
      deprecated: false
      description: Reset database and optionally load demo data.
      operationId: resetClient
      tags:
        - testing
      parameters:
        - name: demo
          in: query
          description: Set to true to load demo data, false otherwise.
          required: false
          type: boolean
          x-example: false
      responses:
        '200':
          description: ''
          headers: {}
          schema:
            type: object
            properties:
              status:
                type: string
                description: status
            required:
              - status
      security:
        - tokenDeveloper: []
      produces:
        - application/json
      x-google-backend:
        address: "${client_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS
  /v1/employees/me:
    get:
      summary: Info employee
      deprecated: false
      description: Returns information about the employee making the request.
      operationId: infoEmployee
      tags: []
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
          schema:
            type: object
            properties:
              id:
                type: string
                description: ID of the employee
              clientId:
                type: string
                description: ID of the associated client
              name:
                type: string
                description: Name of the employee
              email:
                type: string
                description: Email of the employee
              role:
                type: string
                description: Role of the employee
            required:
              - id
              - clientId
              - name
              - email
              - role
        '401':
          description: ''
          headers: {}
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: ''
          headers: {}
          schema:
            $ref: '#/definitions/Error'
      security:
        - tokenAdmin: []
        - tokenUnassignedAdmin: []
        - tokenAgent: []
        - tokenUnassignedAgent: []
        - tokenAnalyst: []
        - tokenUnassignedAnalyst: []
      produces:
        - application/json
      x-google-backend:
        address: "${client_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS
  /v1/employees/invite:
    post:
      summary: Invite employee
      deprecated: false
      description: >
        Invite an employee to join an organization (Client).

        - If the requester doesn't have an admin role or isn't linked to a client, the API returns a 403 Forbidden error.
        - If the email provided isn't registered, a 404 Not Found error is returned.
        - If the employee is already linked to another client, a 409 Conflict error is returned.
        - If the employee is already invited, a 409 Conflict error is returned.
        - If the operation is successful, a 201 Created response is returned.
      operationId: inviteEmployee
      tags: [ ]
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              email:
                type: string
                description: Email of the employee to be invited.
            required:
              - email
      responses:
        '201':
          description: Employee invited successfully.
          schema:
            type: object
            properties:
              message:
                type: string
              employee:
                type: object
                properties:
                  id:
                    type: string
                    description: ID of the employee
                  clientId:
                    type: string
                    description: ID of the associated client
                  name:
                    type: string
                    description: Name of the employee
                  email:
                    type: string
                    description: Email of the employee
                  role:
                    type: string
                    description: Role of the employee
                  invitationStatus:
                    type: string
                    description: Invitation status of the employee
                  invitationDate:
                    type: string
                    format: date-time
                    description: Date of the invitation
                required:
                  - id
                  - email
                  - invitationStatus
                  - invitationDate
        '400':
          description: Bad request. Invalid request body.
          headers: { }
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. Missing or invalid token.
          headers: { }
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. User does not have access to this resource or must be linked to a company.
          headers: { }
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Employee not found.
          headers: { }
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Conflict. Employee is already linked to a client or already invited.
          headers: { }
          schema:
            $ref: '#/definitions/Error'
      security:
        - tokenAdmin: [ ]
      consumes:
        - application/json
      produces:
        - application/json
      x-google-backend:
        address: "${client_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS
  /v1/employees/invitation:
    post:
      summary: Answer an invitation
      deprecated: false
      description: >
        Answer an invitation to join an organization (Client).

        - If the request is sent with an outdated token, the API returns a 404 Not Found error.
        - If the employee does not have an existing invitation, a 404 Not Found error is returned.
        - If the invitation was already accepted previously, a 409 Conflict error is returned.
        - If the invitation is accepted, the request will be successful, and the invitation status will be updated to "accepted".
        - If the invitation is declined, the request will be successful, and the employee will be disassociated from the client.
      operationId: answerInvitation
      tags: [ ]
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              response:
                type: string
                description: The response to the invitation (accepted or declined).
                enum:
                  - accepted
                  - declined
            required:
              - response
      responses:
        '201':
          description: Invitation answered successfully.
          schema:
            type: object
            properties:
              message:
                type: string
              employee:
                type: object
                properties:
                  id:
                    type: string
                    description: ID of the employee
                  clientId:
                    type: string
                    description: ID of the associated client (can be null if declined)
                  name:
                    type: string
                    description: Name of the employee
                  email:
                    type: string
                    description: Email of the employee
                  role:
                    type: string
                    description: Role of the employee
                  invitationStatus:
                    type: string
                    description: Invitation status of the employee
                  invitationDate:
                    type: string
                    format: date-time
                    description: Date of the invitation
                required:
                  - id
                  - email
                  - invitationStatus
                  - invitationDate
        '400':
          description: Bad request. Invalid response.
          headers: { }
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. Missing or invalid token.
          headers: { }
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. Employee not found or no invitation to respond to.
          headers: { }
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Conflict. Invitation already accepted.
          headers: { }
          schema:
            $ref: '#/definitions/Error'
      security:
        - tokenUnassignedAnalyst: [ ]
        - tokenUnassignedAgent: [ ]
      consumes:
        - application/json
      produces:
        - application/json
      x-google-backend:
        address: "${client_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS

  /v1/employees/detail:
    post:
      summary: Get employee detail
      deprecated: false
      description: >
        Endpoint to get the detail of one employee by the employee´s email.

        - Administrator role is required.
        - If there is no authorization token, the API returns a 401 Unauthorized error.
        - If the requester role is not administrator, the API returns a 403 Forbidden error.
        - If the employee is not found, a 404 Not Found error is returned.
        - If the operation is successful, a 200 OK response is returned.
      operationId: getEmployeeDetail
      tags: [ ]
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              email:
                type: string
                description: Email of the employee to be retrieved.
            required:
              - email
      responses:
        '200':
          description: Employee found successfully.
          schema:
            type: object
            properties:
              id:
                type: string
                description: ID of the employee
              clientId:
                type: string
                description: ID of the associated client
              name:
                type: string
                description: Name of the employee
              email:
                type: string
                description: Email of the employee
              role:
                type: string
                description: Role of the employee
              invitationStatus:
                type: string
                description: Invitation status of the employee
              invitationDate:
                type: string
                format: date-time
                description: Date of the invitation
            required:
              - id
              - email
              - invitationStatus
              - invitationDate
        '400':
          description: Bad request. Invalid request body.
          headers: { }
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. Missing or invalid token.
          headers: { }
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. User does not have access to this resource.
          headers: { }
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Employee not found.
          headers: { }
          schema:
            $ref: '#/definitions/Error'
      security:
        - tokenAdmin: [ ]
      consumes:
        - application/json
      produces:
        - application/json
      x-google-backend:
        address: "${client_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS

  /v1/health/user:
    get:
      summary: Health check
      deprecated: false
      description: >-
        This endpoint allows to check the health and availability of the
        UserService API endpoints. It returns a status code indicating the
        health of the API.
      operationId: healthUser
      tags: []
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
          schema:
            type: object
            properties:
              status:
                type: string
                description: Status
            required:
              - status
      security: []
      produces:
        - application/json
      x-google-backend:
        address: "${user_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS
  /v1/auth/user:
    post:
      summary: Authenticate user
      deprecated: false
      description: >-
        Authenticates a user (of a client) and generates a JWT authentication
        token for subsequent API requests.


        - If the user is not found or the password is wrong, the API returns a
        401 Unauthorized error.

        - If the request is not valid JSON or is missing required fields, a 400
        Bad Request error is returned.
      operationId: authUser
      tags: []
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              username:
                type: string
                description: The user's username.
              password:
                type: string
                description: The user's password.
            required:
              - username
              - password
      responses:
        '200':
          description: ''
          headers: {}
          schema:
            type: object
            properties:
              token:
                type: string
            required:
              - token
        '400':
          description: ''
          headers: {}
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: ''
          headers: {}
          schema:
            $ref: '#/definitions/Error'
      security: []
      consumes:
        - application/json
      produces:
        - application/json
      x-google-backend:
        address: "${user_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS
  /v1/reset/user:
    post:
      summary: Reset database
      deprecated: false
      description: Reset database and optionally load demo data.
      operationId: resetUser
      tags:
        - testing
      parameters:
        - name: demo
          in: query
          description: Set to true to load demo data, false otherwise.
          required: false
          type: boolean
          x-example: false
      responses:
        '200':
          description: ''
          headers: {}
          schema:
            type: object
            properties:
              status:
                type: string
                description: status
            required:
              - status
      security:
        - tokenDeveloper: []
      produces:
        - application/json
      x-google-backend:
        address: "${user_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS
  /v1/users/me:
    get:
      summary: User info
      deprecated: false
      description: Returns information about the user making the request.
      operationId: userInfo
      tags: []
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
          schema:
            type: object
            properties:
              id:
                type: string
                description: ID of the user
              clientId:
                type: string
                description: ID of the associated client
              name:
                type: string
                description: Name of the user
              email:
                type: string
                description: Email of the user
            required:
              - id
              - clientId
              - name
              - email
        '401':
          description: ''
          headers: {}
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: ''
          headers: {}
          schema:
            $ref: '#/definitions/Error'
      security:
        - tokenUser: []
      produces:
        - application/json
      x-google-backend:
        address: "${user_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS
  /v1/users:
    post:
      summary: Create user
      deprecated: false
      description: Creates a new user account for a client (company).
      operationId: userCreate
      tags: []
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              clientId:
                type: string
                description: ID of the associated client
              name:
                type: string
                description: Name of the user
              email:
                type: string
                description: Email of the user
              password:
                type: string
                description: Password of the user
            required:
              - clientId
              - name
              - email
              - password
      responses:
        '201':
          description: ''
          headers: {}
          schema:
            type: object
            properties:
              id:
                type: string
                description: ID of the user
              clientId:
                type: string
                description: ID of the associated client
              name:
                type: string
                description: Name of the user
              email:
                type: string
                description: Email of the user
            required:
              - id
              - clientId
              - name
              - email
        '400':
          description: ''
          headers: {}
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: ''
          headers: {}
          schema:
            $ref: '#/definitions/Error'
      security: []
      consumes:
        - application/json
      produces:
        - application/json
      x-google-backend:
        address: "${user_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS
  /v1/health/incidentmodify:
    get:
      summary: Health check
      deprecated: false
      description: >-
        This endpoint allows to check the health and availability of the
        IncidentModify API endpoints. It returns a status code indicating the
        health of the API.
      operationId: healthIncidentModify
      tags: []
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
          schema:
            type: object
            properties:
              status:
                type: string
                description: Status
            required:
              - status
      security: []
      produces:
        - application/json
      x-google-backend:
        address: "${incidentmodify_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS
  /v1/reset/incidentmodify:
    post:
      summary: Reset database
      deprecated: false
      description: Reset database and optionally load demo data.
      operationId: resetIncidentModify
      tags:
        - testing
      parameters:
        - name: demo
          in: query
          description: Set to true to load demo data, false otherwise.
          required: false
          type: boolean
          x-example: 'false'
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              status:
                type: string
                description: status
            required:
              - status
      security:
        - tokenDeveloper: []
      produces:
        - application/json
      x-google-backend:
        address: "${incidentmodify_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS
  /v1/health/incidentquery:
    get:
      summary: Health check
      deprecated: false
      description: >-
        This endpoint allows to check the health and availability of the
        IncidentQuery API endpoints. It returns a status code indicating the
        health of the API.
      operationId: healthIncidentQuery
      tags: []
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
          schema:
            type: object
            properties:
              status:
                type: string
                description: Status
            required:
              - status
      security: []
      produces:
        - application/json
      x-google-backend:
        address: "${incidentquery_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS
  /v1/users/me/incidents:
    get:
      summary: List incidents of user
      deprecated: false
      description: ''
      operationId: incidentsListUser
      tags: []
      parameters: []
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
                channel:
                  type: string
                history:
                  type: array
                  items:
                    type: object
                    properties:
                      seq:
                        type: integer
                      date:
                        type: string
                      action:
                        type: string
                      description:
                        type: string
                    required:
                      - seq
                      - date
                      - action
                      - description
              required:
                - id
                - name
                - channel
                - history
      security:
        - tokenUser: []
      produces:
        - application/json
      x-google-backend:
        address: "${incidentquery_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS
  /v1/employees/me/incidents:
    get:
      summary: List incidents of agent
      deprecated: false
      description: ''
      operationId: incidentsListEmployee
      tags: []
      parameters: []
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              incidents:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    user:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        email:
                          type: string
                      required:
                        - id
                        - name
                        - email
                    filingDate:
                      type: string
                    status:
                      type: string
                  required:
                    - id
                    - name
                    - user
                    - filingDate
                    - status
              totalPages:
                type: integer
              currentPage:
                type: integer
              totalIncidents:
                type: integer
            required:
              - incidents
              - totalPages
              - currentPage
              - totalIncidents
      security:
        - tokenAgent: []
      produces:
        - application/json
      x-google-backend:
        address: "${incidentquery_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS
  /v1/health/registroapp:
    get:
      summary: Health check
      deprecated: false
      description: >-
        This endpoint allows to check the health and availability of the
        RegistroApp API endpoints. It returns a status code indicating the
        health of the API.
      operationId: healthRegistroapp
      tags: []
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
          schema:
            type: object
            properties:
              status:
                type: string
                description: Status
            required:
              - status
      security: []
      produces:
        - application/json
      x-google-backend:
        address: "${registroapp_url}"
        protocol: h2
        path_translation: APPEND_PATH_TO_ADDRESS
swagger: '2.0'
definitions:
  Error:
    type: object
    properties:
      message:
        type: string
      code:
        type: number
    required:
      - message
      - code
securityDefinitions:
  tokenDeveloper:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    x-google-issuer: "${jwt_issuer}"
    x-google-jwks_uri: "${jwt_jwks}"
    x-google-jwt-locations:
    - header: "Authorization"
      value_prefix: "Bearer "
    x-google-audiences: "developer"
  tokenAdmin:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    x-google-issuer: "${jwt_issuer}"
    x-google-jwks_uri: "${jwt_jwks}"
    x-google-jwt-locations:
    - header: "Authorization"
      value_prefix: "Bearer "
    x-google-audiences: "admin"
  tokenUnassignedAdmin:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    x-google-issuer: "${jwt_issuer}"
    x-google-jwks_uri: "${jwt_jwks}"
    x-google-jwt-locations:
    - header: "Authorization"
      value_prefix: "Bearer "
    x-google-audiences: "unassigned_admin"
  tokenUnassignedAgent:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    x-google-issuer: "${jwt_issuer}"
    x-google-jwks_uri: "${jwt_jwks}"
    x-google-jwt-locations:
      - header: "Authorization"
        value_prefix: "Bearer "
    x-google-audiences: "unassigned_agent"
  tokenUnassignedAnalyst:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    x-google-issuer: "${jwt_issuer}"
    x-google-jwks_uri: "${jwt_jwks}"
    x-google-jwt-locations:
      - header: "Authorization"
        value_prefix: "Bearer "
    x-google-audiences: "unassigned_analyst"
  tokenAgent:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    x-google-issuer: "${jwt_issuer}"
    x-google-jwks_uri: "${jwt_jwks}"
    x-google-jwt-locations:
    - header: "Authorization"
      value_prefix: "Bearer "
    x-google-audiences: "agent"
  tokenAnalyst:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    x-google-issuer: "${jwt_issuer}"
    x-google-jwks_uri: "${jwt_jwks}"
    x-google-jwt-locations:
    - header: "Authorization"
      value_prefix: "Bearer "
    x-google-audiences: "analyst"
  tokenUser:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    x-google-issuer: "${jwt_issuer}"
    x-google-jwks_uri: "${jwt_jwks}"
    x-google-jwt-locations:
    - header: "Authorization"
      value_prefix: "Bearer "
    x-google-audiences: "user"
x-components: {}
